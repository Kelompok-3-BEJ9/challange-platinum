{
  "openapi": "3.0.3",
  "info": {
    "title": "API",
    "description": "Ini adalah dokumentasi list API bingle-shop",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.11"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "http://localhost:1990"
    }
  ],
  "tags": [
    {
      "name": "items",
      "description": "List API item",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "order",
      "description": "Access to Petstore orders",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/create/item/v1": {
      "post": {
        "tags": [
          "items"
        ],
        "summary": "Add a new item",
        "description": "Add a item",
        "operationId": "addPet",
        "requestBody": {
          "description": "Create a new pet in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "422": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/update/item/v1/:id": {
      "put": {
        "tags": [
          "items"
        ],
        "summary": "Update Item",
        "description": "Updating the items",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string",
              "default": "available",
              "enum": [
                "available",
                "pending",
                "sold"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/item/v1/:id": {
      "get": {
        "tags": [
          "items"
        ],
        "summary": "Find item by id",
        "description": "Finding an items using id",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/item/v1/": {
      "get": {
        "tags": [
          "items"
        ],
        "summary": "Find all items",
        "description": "Finding all items",
        "operationId": "unknown",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/delete/item/v1/:id": {
      "delete": {
        "tags": [
          "items"
        ],
        "summary": "Delete item by id",
        "description": "Deleting item",
        "operationId": "gatau_kayaknya ngaruh di per idan duniawinya",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/order/v1": {
      "post": {
        "tags": [
          "order"
        ],
        "summary": "Post order",
        "description": "Posting orders to database",
        "operationId": "placeOrder",
        "requestBody":{
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Order"
          },
          "400":{
            "description":"Please input a valid quantity or Item out of stock"
          },
          "401":{
            "description":"Unauthorized"
          },
          "404":{
            "description":"Item not found"
          },
          "500":{
            "description":"Internal Server Error"
          }
        }
      }
    },
    "/update/order/v1": {
      "put": {
        "tags": [
          "order"
        ],
        "summary": "Update order",
        "description": "Update status order to success",
        "operationId": "updateOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "order_id": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful update status order to success"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/get/order/v1": {
      "get": {
        "tags": [
          "order"
        ],
        "summary": "Find One order",
        "description": "Finding order by order_id",
        "operationId": "getOrderById",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "order_id": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Get Order Success"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/register/v1": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Register user",
        "description": "This used for registering user.",
        "operationId": "auth",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User/Register"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Register User And User Cek Email for Verify"
          },
          "400": {
            "description": "Input Email Format / Email and Password Blank"
          },
          "409": {
            "description": "Email Sudah Ada!"
          }
        }
      }
    },
    "/login/v1": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Login user",
        "description": "Login user",
        "operationId": "auth",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User/Login"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Login"
          },
          "401": {
            "description": "Password Wrong"
          },
          "400": {
            "description": "User Must Verify Email"
          },
          "409": {
            "description": "User Not Found"
          }
        }
      }
    },
    "/verify/v1": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Verify Email",
        "description": "Verify Email",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Token For Verify",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succes Verify Email"
          },
          "404": {
            "description": "Invalid Token"
          }
        }
      }
    },
    "/user/v1/:id": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user id",
        "description": "Get users by id",
        "operationId": "getOne",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/update/v1/{id}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "name that need to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/updateDetail/v1/{user_id}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update detail user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateDetail",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "name that need to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/delete/v1/{id}": {
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleted",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "item_id": {
            "type": "integer",
            "format": "int64",
            "example": 5
          },
          "quantity": {
            "type": "integer",
            "format": "int64",
            "example": 10
          }
        },
        "xml": {
          "name": "order"
        }
      },
      "User": {
        "Register": {
          "type": "object",
          "properties": {
            "first_name": {
              "type": "string",
              "example": "John"
            },
            "last_name": {
              "type": "string",
              "example": "James"
            },
            "email": {
              "type": "string",
              "example": "ksuryasedana@gmail.com"
            },
            "password": {
              "type": "string",
              "example": "12345"
            },
            "phone": {
              "type": "string",
              "example": "12345"
            }
          }
        },
        "Login": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "example": "ksuryasedana@gmail.com"
            },
            "password": {
              "type": "string",
              "example": "12345"
            }
          }
        }
      }
    }
  }
}